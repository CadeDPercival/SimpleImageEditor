import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;


public class photoAssignment {
    // Driver
    public static void main(String[] args) {
        // call GUI
        GUI gui = new GUI();
    }
}

class GUI extends JFrame {
    private JLabel imageLabel;
    private BufferedImage image;
    private double gaussianValue = 1;
    private int edgeDetection = 0;
    private int kernelRange = 1;
    private int arraySize = 9;
    private int arrayHalf = 4;


    public GUI() {
        super("Image Changer");

        // initialize the image label
        imageLabel = new JLabel();

        // Create the header panel and set its layout
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new FlowLayout());

        // Create a panel for the buttons and set its layout
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());

        // Create the "File" button and add it to the panel
        JPanel filePanel = new JPanel(new BorderLayout());
        JLabel fileLabel = new JLabel("File:");
        JButton fileButton = new JButton("Open");
        fileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG Images", "png");
                fileChooser.setFileFilter(filter);
                int result = fileChooser.showOpenDialog(GUI.this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    try {
                        image = ImageIO.read(selectedFile);
                        if (image != null) {
                            // Create a new frame to display the image
                            JFrame imageFrame = new JFrame();
                            JLabel imageLabel = new JLabel(new ImageIcon(image));
                            imageFrame.getContentPane().add(imageLabel);
                            imageFrame.pack();
                            imageFrame.setVisible(true);
                        }
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        filePanel.add(fileLabel, BorderLayout.WEST);
        filePanel.add(fileButton, BorderLayout.CENTER);
        buttonPanel.add(filePanel);

        // Create the "Gaussian Filter" spinner and add it to the panel
        JPanel gaussianPanel = new JPanel(new BorderLayout());
        JLabel gaussianLabel = new JLabel("Gaussian Filter:");
        JSpinner gaussianSpinner = new JSpinner(new SpinnerNumberModel(0.5, 0.1, 10.0, 0.1));
        gaussianSpinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                gaussianValue = (Double) gaussianSpinner.getValue();
            }
        });
        gaussianPanel.add(gaussianLabel, BorderLayout.WEST);
        gaussianPanel.add(gaussianSpinner, BorderLayout.CENTER);
        buttonPanel.add(gaussianPanel);

        // Create the "Median Filter" button and add it to the panel
        JPanel medianPanel = new JPanel(new BorderLayout());
        JLabel medianLabel = new JLabel("Median Filter:");
        JComboBox<String> medianComboBox = new JComboBox<>(new String[]{"3x3", "5x5", "7x7"});
        medianComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedSize = (String) medianComboBox.getSelectedItem();

                // Set the correct variables based on the size
                try {
                    assert selectedSize != null;
                    switch (selectedSize) {
                        case "3x3": {
                            kernelRange = 1;
                            arraySize = 9;
                            arrayHalf = 4;
                            break;
                        }
                        case "5x5": {
                            kernelRange = 2;
                            arraySize = 25;
                            arrayHalf = 12;
                            break;
                        }
                        case "7x7": {
                            kernelRange = 3;
                            arraySize = 49;
                            arrayHalf = 24;
                            break;
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        medianPanel.add(medianLabel, BorderLayout.WEST);
        medianPanel.add(medianComboBox, BorderLayout.CENTER);
        buttonPanel.add(medianPanel);

        // Create the "Edge Detection" drop-down and add it to the panel
        JPanel edgeDetectionPanel = new JPanel(new BorderLayout());
        JLabel edgeDetectionLabel = new JLabel("Edge Detection:");
        JComboBox<String> edgeDetectionComboBox = new JComboBox<>(new String[]{"None", "Prewitt Operator", "Sobel Operator"});
        edgeDetectionComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedOption = (String) edgeDetectionComboBox.getSelectedItem();

                // Create a numbered system for the selected edge
                try {
                    switch (selectedOption) {
                        case "None":
                            edgeDetection = 0;
                            break;
                        case "Prewitt Operator":
                            edgeDetection = 1;
                            break;
                        case "Sobel Operator":
                            edgeDetection = 2;
                            break;
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        edgeDetectionPanel.add(edgeDetectionLabel, BorderLayout.WEST);
        edgeDetectionPanel.add(edgeDetectionComboBox, BorderLayout.CENTER);
        buttonPanel.add(edgeDetectionPanel);

        // Add the button panel to the main header panel
        headerPanel.add(buttonPanel, BorderLayout.CENTER);

        // Create the apply button and add it to a new panel
        JPanel applyPanel = new JPanel();
        JButton applyButton = new JButton("Apply");
        applyPanel.add(applyButton);
        applyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                BufferedImage newImage = imageCreate(image, image.getWidth(), image.getHeight(), gaussianValue, kernelRange, arraySize, arrayHalf, edgeDetection);
                try {
                    if (newImage != null) {
                        // Create a new frame to display the image
                        JFrame imageFrame = new JFrame();
                        JLabel imageLabel = new JLabel(new ImageIcon(newImage));
                        imageFrame.getContentPane().add(imageLabel);
                        imageFrame.pack();
                        imageFrame.setVisible(true);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });

        // Add the apply panel to the main header panel
        headerPanel.add(applyPanel, BorderLayout.SOUTH);

        // Add the header panel to the frame
        getContentPane().add(headerPanel, BorderLayout.NORTH);

        // Add the image
        getContentPane().add(imageLabel, BorderLayout.CENTER);

        // Set the size and make the frame visible
        setSize(1500, 1500);
        setVisible(true);
    }

    // Create the new images
    public BufferedImage imageCreate(BufferedImage image, int width,
                            int height, double std, int kSize, int aSize, int half, int ed) {

        // Gray Scale the image
        BufferedImage newImage = greyScale.apply(image, width, height);
        newImage = medianFilter.apply(newImage, width, height, kSize, aSize, half);
        newImage = gaussianFilter.apply(newImage, width, height, std);

        switch (ed) {
            case 0:
                break;
            case 1:
                newImage = prewittOperator.apply(newImage, width, height);
                break;
            case 2:
                newImage = sobelOperator.apply(newImage, width, height);
        }

        return newImage;
    }
}

class greyScale {

    // Grey scale an image
    public static BufferedImage apply(
            BufferedImage image,
            int width,
            int height) {

        // grey scaled image
        BufferedImage greyScaleImage = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = image.getRGB(x, y);

                int red = (pixel >> 16) & 0xff;
                int green = (pixel >> 8) & 0xff;
                int blue = (pixel) & 0xff;

                // calculate the greyscale value
                int grey = (red + green + blue) / 3;

                // combine the greyscale value
                int newPixel = (grey << 16) | (grey << 8) | grey;

                // set the new value
                greyScaleImage.setRGB(x, y, newPixel);
            }
        }

        return greyScaleImage;
    }
}

class gaussianFilter {
    // gaussian kernel
    private static double gaussian(int x, int y, double stD) {
        // create the 2 times standard deviation squared
        double sqrDev = 2 * (stD * stD);

        // the first part of the equation
        double firstPart = 1 / (3.14 * sqrDev);

        // second part of the equation
        double secondPart = Math.exp(-((x * x) + (y * y)) / sqrDev);

        // return both multiplied together
        return firstPart * secondPart;
    }

    // the apply function that brings the entire gaussian filter together
    public static BufferedImage apply(BufferedImage image, int width, int height, double stD) {

        // create a new image for the median blur
        BufferedImage gaussianImage = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);

        // gaussian kernel matrix
        double[] gMatrix = getKernelMatrix(stD);

        // iterate through each pixel
        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // create the array for the values in the kernel matrix
                double[] pixelValues = new double[9];
                int index = 0;

                // get the neighboring pixels and multiply them with
                // the kernel matrix that went through the gaussian math
                for (int nY = -1; nY <= 1; nY++) {
                    for (int nX = -1; nX <= 1; nX++) {

                        // get the pixel values for all the pixels in the kernel
                        int greyValue = (image.getRGB(x + nX,y + nY) & 0xff);
                        pixelValues[index] = greyValue;

                        // go to next index
                        index++;
                    }
                }

                // multiply the pixel values with the gaussian kernel
                for (int i = 0; i < 9; i++) {
                    pixelValues[i] = pixelValues[i] * gMatrix[i];
                }

                int sum = (int) Arrays.stream(pixelValues).sum();

                // set the pixel to the middle index
                int greyColorPixel = (sum << 16) | (sum << 8) | sum;
                gaussianImage.setRGB(x, y, greyColorPixel);
            }
        }

        return gaussianImage;
    }

    public static double[] getKernelMatrix(double stD) {
        // create the matrix
        double[] matrix = new double[9];
        int index = 0;

        for (int nY = -1; nY <= 1; nY++) {
            for (int nX = -1; nX <= 1; nX++) {
                // get the gaussian value and apply it
                matrix[index] = gaussian(nX, nY, stD);
                index++;
            }
        }

        // add all the elements together
        double sum = Arrays.stream(matrix).sum();

        // divide the original elements to ensure that the matrix adds to one
        for (int i = 0; i < 9; i++) {
            matrix[i] = matrix[i] / sum;
        }

        return matrix;
    }

}

class medianFilter {

    // Median Filter
    public static BufferedImage apply(
            BufferedImage image,
            int width,
            int height,
            int kSize,
            int aSize,
            int half) {

        // create a new image for the median blur
        BufferedImage medianImage = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);

        // iterate through each pixel
        for (int y = kSize; y < height - kSize; y++) {
            for (int x = kSize; x < width - kSize; x++) {

                // create the array for the pixels
                int[] pixelValues = new int[aSize];
                int index = 0;

                // iterate through each neighbor pixel
                for (int nY = -kSize; nY <= kSize; nY++) {
                    for (int nX = -kSize; nX <= kSize; nX++) {
                        // get the pixel value and put it into the list
                        int greyValue = (image.getRGB(x + nX,y + nY) & 0xff);
                        pixelValues[index] = greyValue;
                        index++;
                    }
                }

                // sort the array list and grab the middle index
                Arrays.sort(pixelValues);
                int median = pixelValues[half];

                // set the pixel to the middle index
                int greyColorPixel = (median << 16) | (median << 8) | median;
                medianImage.setRGB(x, y, greyColorPixel);
            }
        }

        return medianImage;
    }
}

class prewittOperator {
    private static final int[] xMatrix = new int[]{
            -1, 0, 1,
            -1, 0, 1,
            -1, 0, 1
    };

    private static final int[] yMatrix = new int[]{
            -1, -1, -1,
            0, 0, 0,
            1, 1, 1
    };

    public static BufferedImage apply(BufferedImage image, int width, int height) {

        // create a new image for the median blur
        BufferedImage prewittImageX = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);
        // create a new image for the median blur
        BufferedImage prewittImageY = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);
        // create a new image for the median blur
        BufferedImage prewittImage = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);

        // iterate through each pixel on the x-axis
        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // create the array for the pixels
                int[] pixelValues = new int[9];
                int index = 0;

                // iterate through each neighbor pixel
                for (int nY = -1; nY <= 1; nY++) {
                    for (int nX = -1; nX <= 1; nX++) {
                        // get the pixel value and put it into the list
                        int greyValue = (image.getRGB(x + nX,y + nY) & 0xff);
                        pixelValues[index] = greyValue;
                        index++;
                    }
                }

                // multiply the values together from x Matrix and the kernel
                for (int i = 0; i < 9; i++) {
                    pixelValues[i] = pixelValues[i] * xMatrix[i];
                }

                // get the total sum
                int sum = Arrays.stream(pixelValues).sum();
                sum = Math.abs(sum);

                // set the pixel on the x Image
                int greyColorPixel = (sum << 16) | (sum << 8) | sum;
                prewittImageX.setRGB(x, y, greyColorPixel);
            }
        }

        // iterate through each pixel on the y-axis
        for (int x = 1; x < width - 1; x++) {
            for (int y = 1; y < height - 1; y++) {

                // create the array for the pixels
                int[] pixelValues = new int[9];
                int index = 0;

                // iterate through each neighbor pixel
                for (int nY = -1; nY <= 1; nY++) {
                    for (int nX = -1; nX <= 1; nX++) {
                        // get the pixel value and put it into the list
                        int greyValue = (image.getRGB(x + nX,y + nY) & 0xff);
                        pixelValues[index] = greyValue;
                        index++;
                    }
                }

                // multiply the values together from x Matrix and the kernel
                for (int i = 0; i < 9; i++) {
                    pixelValues[i] = pixelValues[i] * yMatrix[i];
                }

                // get the total sum
                int sum = Arrays.stream(pixelValues).sum();
                sum = Math.abs(sum);

                // set the pixel on the x Image
                int greyColorPixel = (sum << 16) | (sum << 8) | sum;
                prewittImageY.setRGB(x, y, greyColorPixel);
            }
        }

        // combine the two images
        // iterate through each pixel on the x-axis
        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // get pixels from each
                int pixelX = prewittImageX.getRGB(x, y) & 0xff;
                int pixelY = prewittImageY.getRGB(x, y) & 0xff;

                // get total between the two
                int magnitude = (int) Math.sqrt((pixelX * pixelX) + (pixelY * pixelY));

                if (magnitude > 50) {
                    magnitude = 255;
                }

                // set the pixel
                int greyColorPixel = (magnitude << 16) | (magnitude << 8) | magnitude;
                prewittImage.setRGB(x, y, greyColorPixel);

            }
        }

        return prewittImage;
    }

}

class sobelOperator {
    private static int[] xMatrix = new int[]{
            -1, 0, 1,
            -2, 0, 2,
            -1, 0, 1
    };

    private static int[] yMatrix = new int[]{
            -1, -2, -1,
            0, 0, 0,
            1, 2, 1
    };

    public static BufferedImage apply(BufferedImage image, int width, int height) {

        // create a new image for the median blur
        BufferedImage sobelImageX = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);
        // create a new image for the median blur
        BufferedImage sobelImageY = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);
        // create a new image for the median blur
        BufferedImage sobelImage = new BufferedImage(
                width, height, BufferedImage.TYPE_BYTE_GRAY);

        // iterate through each pixel on the x-axis
        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // create the array for the pixels
                int[] pixelValues = new int[9];
                int index = 0;

                // iterate through each neighbor pixel
                for (int nY = -1; nY <= 1; nY++) {
                    for (int nX = -1; nX <= 1; nX++) {
                        // get the pixel value and put it into the list
                        int greyValue = (image.getRGB(x + nX,y + nY) & 0xff);
                        pixelValues[index] = greyValue;
                        index++;
                    }
                }

                // multiply the values together from x Matrix and the kernel
                for (int i = 0; i < 9; i++) {
                    pixelValues[i] = pixelValues[i] * xMatrix[i];
                }

                // get the total sum
                int sum = Arrays.stream(pixelValues).sum();
                sum = Math.abs(sum);

                // set the pixel on the x Image
                int greyColorPixel = (sum << 16) | (sum << 8) | sum;
                sobelImageX.setRGB(x, y, greyColorPixel);
            }
        }

        // iterate through each pixel on the y-axis
        for (int x = 1; x < width - 1; x++) {
            for (int y = 1; y < height - 1; y++) {

                // create the array for the pixels
                int[] pixelValues = new int[9];
                int index = 0;

                // iterate through each neighbor pixel
                for (int nY = -1; nY <= 1; nY++) {
                    for (int nX = -1; nX <= 1; nX++) {
                        // get the pixel value and put it into the list
                        int greyValue = (image.getRGB(x + nX,y + nY) & 0xff);
                        pixelValues[index] = greyValue;
                        index++;
                    }
                }

                // multiply the values together from x Matrix and the kernel
                for (int i = 0; i < 9; i++) {
                    pixelValues[i] = pixelValues[i] * yMatrix[i];
                }

                // get the total sum
                int sum = Arrays.stream(pixelValues).sum();
                sum = Math.abs(sum);

                // set the pixel on the x Image
                int greyColorPixel = (sum << 16) | (sum << 8) | sum;
                sobelImageY.setRGB(x, y, greyColorPixel);
            }
        }

        // combine the two images
        // iterate through each pixel on the x-axis
        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // get pixels from each
                int pixelX = sobelImageX.getRGB(x, y) & 0xff;
                int pixelY = sobelImageY.getRGB(x, y) & 0xff;

                // get total between the two
                int magnitude = (int) Math.sqrt((pixelX * pixelX) + (pixelY * pixelY));

                if (magnitude > 50) {
                    magnitude = 255;
                }

                // set the pixel
                int greyColorPixel = (magnitude << 16) | (magnitude << 8) | magnitude;
                sobelImage.setRGB(x, y, greyColorPixel);

            }
        }

        return sobelImage;
    }

}
